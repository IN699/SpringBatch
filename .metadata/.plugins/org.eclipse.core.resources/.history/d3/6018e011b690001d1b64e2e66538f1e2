package com.bhavuk.SpringBatchTut.Address;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.file.FlatFileItemWriter;
import org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor;
import org.springframework.batch.item.file.transform.DelimitedLineAggregator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;



@EnableBatchProcessing
@Configuration
public class MyCompositeItemWriter implements ItemWriter<Student> {
//	private static final Logger=LoggerFactory.getLogger(MyCompositeItemWriter.class);
	
	

	
	
	static int x;
//	@Autowired
	private List<ItemWriter<? super Student>> delegates;
	@Autowired
	private DataSource datasource;
	
	public DataSource getDatasource() {
		return datasource;
	}
	public MyCompositeItemWriter() {
		super();
		// TODO Auto-generated constructor stub
	}
	@SuppressWarnings("unlikely-arg-type")
	@Override
	public void write(List<? extends Student> items) throws Exception {
		// TODO Auto-generated method stub
		x=items.size();
		List<Object> item=new ArrayList<>(x);
		for(Student s1: items)
		{
		item.add(0,s1.getLastName());
		item.add(1,s1.getFirstName());
		item.add(2,s1.getPhone());
		item.add(3,s1.getEmail());
		item.add(4,s1.getTitle());
		item.add(5,s1.getDesignation());
			
		}
		
		
		for(int i=0;i<x;i++)
			{
				if(item.get(i).equals(""))
				{
					item.add(6, false);
				}
			}
		if(item.get(2).toString().length()>10)
		{
			item.add(6, false);
		}
		
		for(int i=0;i<x;i++)
		{
			if(items.get(i).equals(false))
			{
				setDelegates(Arrays.asList(writerCSV()));
				
			}
			else {
				setDelegates(Arrays.asList(writerJDBC()));
			}
		}
		
	}
	public void setDelegates(List<ItemWriter<? super Student>> delegates) {
		this.delegates = delegates;
	}
	
	
	
	
	@Bean
	@StepScope
	public FlatFileItemWriter<Student> writerCSV()
	{
		FlatFileItemWriter<Student> writer=new FlatFileItemWriter<Student>();
		
		DelimitedLineAggregator<Student> lineAggregator=new DelimitedLineAggregator<Student>();
		lineAggregator.setDelimiter(",");
		
		BeanWrapperFieldExtractor<Student> Reflector=new BeanWrapperFieldExtractor<Student>();
		Reflector.setNames(new String[]{"lastName","firstName","phone","email","title","designation"});
		
		
		writer.setResource(new FileSystemResource("C:\\Users\\bgupta\\Desktop\\sts\\sts-4.17.0.RELEASE\\STSProjects\\SpringBatchTut\\src\\main\\resources\\ErrorOutput.csv"));
		writer.setAppendAllowed(true);
		writer.setLineAggregator(lineAggregator);
//		writer.setHeaderCallback(null);
		lineAggregator.setFieldExtractor(Reflector);
		return writer;
		
		
	}
	@Bean
	@StepScope
	public JdbcBatchItemWriter<Student> writerJDBC()
	{
		JdbcBatchItemWriter<Student> writer=new JdbcBatchItemWriter<Student>();
		writer.setItemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<Student>());
		writer.setSql("INSERT INTO contact_bhavuk(Last_Name,First_Name,Phone,Email,Title,Designation) VALUES(:lastName,:firstName,:phone,:email,:title,:designation)");
		writer.setDataSource(this.datasource);
		return writer;	
		}
	
	

}
